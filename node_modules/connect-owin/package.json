{
  "name": "connect-owin",
  "version": "0.1.0",
  "description": "Connect middleware for .NET using OWIN",
  "keywords": [
    "connect",
    "middleware",
    ".NET",
    "CLR",
    "OWIN"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/bbaia/connect-owin.git"
  },
  "bugs": {
    "url": "https://github.com/bbaia/connect-owin/issues"
  },
  "author": {
    "name": "Bruno Baia",
    "email": "brbaia@gmail.com",
    "url": "http://twitter.com/bbaia"
  },
  "dependencies": {
    "edge": "0.7.13"
  },
  "devDependencies": {
    "supertest": "~0.7.1",
    "should": "~1.2.2",
    "connect": "~2.9.0",
    "grunt": "~0.4.1",
    "grunt-msbuild": "~0.1.3",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-mocha-test": "~0.6.3",
    "grunt-contrib-connect": "~0.5.0",
    "load-grunt-tasks": "~0.2.0"
  },
  "licenses": [
    {
      "type": "Apache",
      "url": "https://raw.github.com/bbaia/connect-owin/master/LICENSE"
    }
  ],
  "main": "lib/connect-owin",
  "scripts": {
    "test": "grunt test"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "# [connect-owin](https://github.com/bbaia/connect-owin/) \r\n\r\nImplement node.js [connect middleware](http://www.senchalabs.org/connect/) in .NET using [OWIN](http://owin.org/).\r\n\r\nVersions are incremented according to [semver](http://semver.org/).\r\n\r\nThis is a fork of Tomasz Janczuk's [original code](https://github.com/bbaia/edge-connect/);\r\nthanks go to him for getting this thing started!\r\n\r\n## Introduction\r\n\r\nOWIN itself is not a technology, just a specification to decouple Web applications from the Web server. \r\nThe goal of `connect-owin` is to implement this specification to use `node.js`, through `connect` framework, as the Web Server.\r\n\r\nThe `connect-owin` exports a function that returns a connect middleware. \r\nThe function takes the path of the OWIN .NET assembly file as a parameter.\r\nThe following code shows how to use `connect-owin` with [express.js](http://expressjs.com/), \r\na Web framework built on connect:\r\n\r\n```js\r\nvar owin = require('connect-owin'),\r\n    express = require('express');\r\n\r\nvar app = express();\r\napp.all('/net', owin('MyAssembly.dll'));\r\n// ...\r\napp.listen(3000);\r\n```\r\n\r\n.NET OWIN middlewares can be implemented in two ways with `connect-owin`:\r\n\r\n* By implementing the OWIN primary interface `Func<IDictionary<string, object>, Task>`:\r\n\r\n```csharp\r\npublic class Startup\r\n{\r\n  public Task Invoke(IDictionary<string, object> env) \r\n  {\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\n* By using the `IAppBuilder` interface that acts as the glue for any .NET OWIN middleware, exactly how connect in node.js works:\r\n\r\n```csharp\r\npublic class Startup\r\n{\r\n  public void Configuration(IAppBuilder builder)\r\n  {\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nThe `connect-owin` function uses `<assembly name>.Startup` as default type name, and `Configuration` as default method name.\r\nCustom type and method name can be provided via an options object:\r\n\r\n```js\r\nowin({\r\n    assemblyFile: 'MyAssembly.dll',\r\n    typeName: 'MyNamespace.MyType',\r\n    methodName: 'MyMethodName'\r\n});\r\n```\r\n\r\n## Requirements\r\n\r\n* Windows\r\n* [node.js](http://nodejs.org/) 0.8.x or later\r\n* [.NET Framework 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653)\r\n\r\n## Building\r\n\r\n[Grunt](http://gruntjs.com/) is used to build, test and preview the sample.\r\n\r\nFirst, install `connect-owin` dependencies:\r\n\r\n\t$ npm install\r\n\r\nThen, you'll need to install Grunt's command line interface (CLI) globally:\r\n\r\n\t$ npm install -g grunt-cli\r\n\r\nYou can build sources, run tests and preview the sample by using the default Grunt task:\r\n\r\n\t$ grunt\r\n\r\n### Building sources\r\n\r\n\t$ grunt build\r\n\r\nThe build creates the `lib\\clr\\Connect.Owin.dll` file required by the `lib\\connect-owin.js` library.\r\n\r\n### Running the sample\r\n\r\n_Using Grunt_\r\n\r\nThe following command uses the `grunt-contrib-connect` task to start a `connect` web server \r\nwith the .NET OWIN application plugged in as a middleware and open the page in your default browser:\r\n\r\n\t$ grunt hello\r\n\r\n_Using express.js_\r\n\r\nAn [express.js](http://expressjs.com/) sample is also provided to run the .NET OWIN application:\r\n\r\n\t$ cd examples\\hello\r\n\t$ npm install express\r\n\t$ node server.js\r\n\r\nThen go to http://localhost:3000/node. This should display a message from an express middleware in node.js. \r\n\r\nIf you go to http://localhost:3000/net, you should see a similar message from the .NET OWIN application \r\nin `Owin.Connect.Examples.Hello.dll` plugged in as a middleware to the express pipeline.\r\n\r\n_More samples available @ [connect-owin-samples](https://github.com/bbaia/connect-owin-samples/)_\r\n\r\n### Running tests\r\n\r\n\t$ grunt test\r\n\r\n`mocha` is used to run tests.",
  "readmeFilename": "README.md",
  "_id": "connect-owin@0.1.0",
  "dist": {
    "shasum": "cd0d360114c3b72396b94ed03d0ec5bb0c087f00"
  },
  "_resolved": "git://github.com/bbaia/connect-owin.git#06354e65346abcef414a6cd808c7ee532e346d30",
  "_from": "git://github.com/bbaia/connect-owin.git"
}
